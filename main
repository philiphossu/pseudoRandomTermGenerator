#Goal: Generate pseudo random terms which can be appended to
#established systems. Admittedly is not random in the correct sense.

#Import statements
from random import randint
import decimal

#Definition of main system generator function
def systemGenerator(d, constant, deb):
    #Definition for the master variable options
    masterVarOptions = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r"]
    #Definition for lists
    system = []
    varList = []
    numTerms = []

    #First initialization steps
    for a in range(0,d):
        #Determine how many variables are going to be used, d number of variables
        varList.append(masterVarOptions[a])
        #Initialize random number of terms for each equation, d number of equations
        numTerms.append(randint(1,d))
        #Initialize the system with the known equation data so far
        system.append(newEquation(numTerms[a],varList, [], [], []))

    #Second initialization steps - adding to the created equations
    for a in range(0,d):
        #If the constant option is true, generate a constant for each equation
        if(constant):
            system[a].constant.append(round(randint(0,100)/randint(1,100), 4))
        #Generate d number of coefficients to each equation object
        for b in range(0,system[a].terms):
            system[a].coefficients.append(round(randint(0,100)/randint(1,100), 4))

    #Third initialization steps
    for a in range(0,d):
        #Add random exponents to the equation
        for b in range(0,(system[a].terms*len(system[a].variables))):
            system[a].exponents.append(randint(0,30))

    #Debug for system details before they are string-ified
    if(deb):
        #Print out number of terms list
        for a in numTerms:
            print(a)
        #Print out variables list
        for a in varList:
            print(a)
        printEqnDetails(system)

    #Return out final system list
    finalSystem = []
    for a in range(0,len(system)):
        finalSystem.append(system[a].out(d))
    return finalSystem

#Definition of equation objects and important out method used in systemGenerator
class newEquation(object):
    terms = []
    variables = []
    coefficients = []
    exponents = []
    constant = []
    def __init__(self, terms, variables, coefficients, exponents, constant):
        self.terms = terms
        self.variables = variables
        self.coefficients = coefficients
        self.exponents = exponents
        self.constant = constant
    #Out is the function used to convert the pieces of the equation to an M2 string format
    def out(self, d):
        outstr = ""
        counter = 0
        i = 0
        #For each coefficient...
        for a in range(0, len(self.coefficients)):
            #Write the coefficient
            outstr += str(self.coefficients[a])+"*"
            #For d number of items...
            for b in range(0,d):
                #Add the variables and exponents related to that coefficient
                #print("Adding to string: ",str(self.variables[b]))
                outstr += str(self.variables[b])
                #print("Adding to string: ^")
                outstr +="^"
                #print("Adding to string: ",str(self.exponents[i]))
                outstr += str(self.exponents[i])
                #If the item in question is the last in the set, do not put a *
                if(b%d != d-1):
                    outstr += "*"
                i += 1
                counter += 1
                #Once you get to the end of the variables list, break out of this loop
                if(counter == len(self.variables)):
                    break
            if a != len(self.coefficients)-1:
                outstr += "+"
        outstr += "+"
        outstr += str(self.constant[0])
        return outstr

#Definition of a helper function to print equation details if debug is on
def printEqnDetails(eqns):
    for a in eqns:
        print("Terms: ")
        print(a.terms)
        print("Variables: ")
        print(a.variables)
        print("Coefficients: ")
        print(a.coefficients)
        print("Exponents: ")
        print(a.exponents)
        print("Constant: ")
        print(a.constant)

#Main calls systemGenerator and prints out the result
def main():
    output = systemGenerator(5, True, False)
    print("=======Equations========")
    print("system = {")
    for a in range(0,len(output)):
        if a != len(output)-1:
            print(output[a],",")
        else:
            print(output[a])
    print("}")

main()
